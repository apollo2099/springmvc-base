<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:datasource.properties</value>
			</list>
		</property>
	</bean>

	 
	
	<!-- druid 数据源连接池方式 -->
     <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
		<property name="initialSize" value="${dataSource.initialPoolSize}" />
		<property name="minIdle" value="${dataSource.minIdle}" />
		<property name="maxActive" value="${dataSource.maxActive}" />
		<property name="maxWait" value="${dataSource.connectionTimeout}" />
		<property name="timeBetweenEvictionRunsMillis" value="${dataSource.validationInterval}" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="${dataSource.validationQuery}" />
		<property name="testOnBorrow" value="${dataSource.testOnBorrow}" />
		<property name="testWhileIdle" value="${dataSource.testWhileIdle}" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<property name="filters" value="${dataSource.filters}" />
		<property name="removeAbandoned" value="${dataSource.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${dataSource.removeAbandonedTimeout}" />
	</bean>
	     
	<!-- enable autowire -->
    <context:annotation-config />
    
    	
	<!-- 定义MyBatis的SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-configuration.xml"/>
		<!-- 启动时自动加载所有的mapper.xml-->
		<property  name="mapperLocations"  value="classpath:com/base/persistence/*Mapper.xml"/> 
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="BATCH" /><!-- 进行批量操作属性 -->
	</bean>
	
	<!-- DAO接口所在的包名,Spring会自动查找其下的类 -->
	<bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.base.persistence" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<!-- 由spring管理mybatis的事物 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
	
	<!-- 定义拦截器，用来指定事物属性，级别，和异常处理 -->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="select*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED,-RuntimeException,-Exception</prop>
			</props>
		</property>
	</bean>
	
	<!-- 用来定义那些类需要采用事物管理 spring 事物的动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->
	<bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<!-- 对类名以MybatisService结尾的类进行代理 -->
			<value>*Service*</value>
		</property>
		<!-- 对代理类进行加载拦截器(实现通知的过程) -->
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	
	<!-- 
	<tx:annotation-driven transaction-manager="transactionManager" />
    -->
    
	<bean id="baseDAO" class="com.base.common.dao.BaseDAO">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
	</bean>
	
	<!-- 自动扫描组件，需要把controller去掉，否则影响事务管理 -->
    <context:component-scan base-package="com.base">
      <context:exclude-filter type="regex" expression="com.base.web.*"/>
      <context:exclude-filter type="regex" expression="com.base.modules.*"/>
    </context:component-scan>
	
	<bean id="springContextHolder" class="com.base.framework.spring.SpringContextHolder" />
	
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>res.biz.messages</value>
			</list>
		</property>
	</bean>
	
</beans> 